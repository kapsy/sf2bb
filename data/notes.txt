
Breakdown of the pgen chunk:

02726f0: 0000 0000 0000 0000 0000 1300 7067 656e  ............pgen
0272700: 5000 0000 1000 3101 2900 0000 3300 f4ff  P.....1.)...3...
0272710: 1000 3101 2900 0000 2b00 2328 2900 0400  ..1.)...+.#()...
0272720: 2b00 292f 2900 0300 2b00 3037 2900 0200  +.)/)...+.07)...
0272730: 2b00 2328 3000 4400 2900 0100 2900 0500  +.#(0.D.)...)...
0272740: 2900 0600 1000 f100 2900 0600 2900 0700  ).......)...)...
0272750: 0000 0000 696e 7374 c600 0000 4361 6d70  ....inst....Camp

0x50 or 80 bytes
1000 3101 - reverb(16) value 305?

1000 f100

2900 0000 - inst(41) value 0
    This is the index into the INST sub-chunk providing the instrument to be
    used for the current preset zone. A value of zero indicates the first
    instrument in the list. The value should never exceed two less than the
    size of the instrument list. The instrument enumerator is the terminal
    generator for PGEN zones. As such, it should only appear in the PGEN
    sub-chunk, and it must appear as the last generator enumerator in all but
    the global preset zone.

3300 f4ff - (51) value 0xfff4 65524
    Course tune in semitones - this definitely sounds wrong.

1000 3101 - Same as above
2900 0000

2b00 2328 - (43) value 10275
    Key Range:
        0x23 - 0x28
        35 - 40 OR B1 to E2 

2b00 292f 41 - 47 OR F2 to B2

2b00 3037 48 - 55 OR C3 to G3

2b00 2328

3000 4400 48 - 68 Initial attenuation - 6.8 dB?


0000 0000 (terminator)

So, it all sort of makes sense, it just doesn't seem to correlate to what Battery is telling me.
A good approach would be to make an sf2 that contains just what we need and the correct chop points and see how that plays out.

I'm guessing in this ex the preset zone is not valid anyway? Not sure...
So for our app I'm not sure what to put here. 
0000 0000 0000 0000


///////////////////////////////////////////////////////////////////////////////
// inst Chunk /////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

0272750: 0000 0000 696e 7374 c600 0000 4361 6d70  ....inst....Camp
0272760: 616e 6120 2020 2020 2020 4e43 2020 2000  ana       NC   .
0272770: 0000 506f 7765 7220 5472 6170 2033 352d  ..Power Trap 35-
0272780: 3430 0000 0000 0700 5374 616e 645f 7472  40......Stand_tr
0272790: 6170 2034 382d 3535 0000 0000 0f00 5374  ap 48-55......St
02727a0: 616e 645f 7472 6170 2034 312d 3437 0000  and_trap 41-47..
02727b0: 0000 1700 5374 616e 645f 7472 6170 2033  ....Stand_trap 3
02727c0: 352d 3430 0000 0000 1f00 4669 6e67 6572  5-40......Finger
02727d0: 4261 7373 2057 6964 6520 2020 2000 2600  Bass Wide    .&.
02727e0: 4f76 6572 6472 6976 6520 4775 6974 6172  Overdrive Guitar
02727f0: 0000 0000 3100 5072 6f70 6865 742d 3520  ....1.Prophet-5 
0272800: 5374 7269 6e67 2020 2000 4000 454f 4900  String   .@.EOI.
0272810: 0000 0000 0000 0000 0000 0000 0000 0000  ................
0272820: 4700 6962 6167 2001 0000 0000 0000 1400  G.ibag .........

4361 6d70 616e 6120 2020 2020 2020 4e43 2020 2000 0000
Campana       NC   . 00
--------------------
So I assume it means it's the first instrument

///////////////////////////////////////////////////////////////////////////////
// igen Chunk /////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

0272950: 0000 0000 0000 0000 0000 6305 6967 656e  ..........c.igen
0272960: 9015 0000 2b00 2433 2500 e803 3400 2400  ....+.$3%...4.$.
0272970: 3a00 4300 1600 a2fb 1800 a2fb 1a00 20d1  :.C........... .
0272980: 1d00 0000 1e00 4a00 2200 20d1 2300 87fb  ......J.". .#...
0272990: 2400 5a15 2600 0103 0400 0000 1000 4600  $.Z.&.........F.
02729a0: 1100 0400 0800 4038 3600 0100 3000 6100  ......@86...0.a.
02729b0: 3500 0400 2b00 343a 2500 e803 3400 2400  5...+.4:%...4.$.
02729c0: 3a00 4a00 1600 a2fb 1800 a2fb 1a00 20d1  :.J........... .
02729d0: 1d00 0000 1e00 4a00 2200 20d1 2300 87fb  ......J.". .#...
02729e0: 2400 be13 2600 0103 0400 0000 1000 4600  $...&.........F.
02729f0: 1100 0400 0800 4038 3600 0100 3000 6100  ......@86...0.a.
0272a00: 3500 0300 2b00 3b40 2500 e803 3400 2400  5...+.;@%...4.$.
0272a10: 3a00 5100 1600 a2fb 1800 a2fb 1a00 20d1  :.Q........... .
0272a20: 1d00 0000 1e00 4a00 2200 20d1 2300 87fb  ......J.". .#...
0272a30: 2400 2c12 2600 0103 0400 0000 1000 4600  $.,.&.........F.
0272a40: 1100 0400 0800 4038 3600 0100 3000 6100  ......@86...0.a.
0272a50: 3500 0200 2b00 4146 2500 e803 3400 2400  5...+.AF%...4.$.
0272a60: 3a00 5600 1600 a2fb 1800 a2fb 1a00 20d1  :.V........... .
0272a70: 1d00 0000 1e00 4a00 2200 20d1 2300 87fb  ......J.". .#...
0272a80: 2400 dd0f 2600 0103 0400 0000 1000 4600  $...&.........F.
0272a90: 1100 0400 0800 4038 3600 0100 3000 6100  ......@86...0.a.
0272aa0: 3500 0100 2b00 4747 2500 e803 3400 2400  5...+.GG%...4.$.
0272ab0: 3a00 5600 1600 a2fb 1800 a2fb 1a00 20d1  :.V........... .
0272ac0: 1d00 0000 1e00 4a00 2200 20d1 2300 87fb  ......J.". .#...
0272ad0: 2400 dd0f 2600 0103 0400 0000 1000 4600  $...&.........F.
0272ae0: 1100 0400 0800 4038 3600 0100 3000 6100  ......@86...0.a.

Size 9015 5520 bytes

Breakdown:

2b00 2433 (43) KeyRange 36 - 51 OR C2 - D#3
2500 e803 (37) sustainVolEnv 1000 - Fits with Campana patch
3400 2400 (52) fineTune cents  36 Affects the editor settings in Battery
3a00 4300 (58) overridingRootKey 67 G3 - fits once again for first zone.
...So pretty happy with that. Nattoku.

It's almost as though the best way would be to go something like
WRITE THE USAGE CODE FIRST!

// TODO: (KAPSY) Should be generating this!
enum
{
    CX  = 60,
    C#X = 61,
    DX  = 62,
    D#X = 63,
    EX  = 64,
    FX  = 65,
    F#X = 66,
    GX  = 67,
    G#X = 68,
    AX  = 69,
    A#X = 70,
    BX  = 71,

    C0  = 60,
    C#0 = 61,
    D0  = 62,
    D#0 = 63,
    E0  = 64,
    F0  = 65,
    F#0 = 66,
    G0  = 67,
    G#0 = 68,
    A0  = 69,
    A#0 = 70,
    B0  = 71,

    C1  = 60,
    C#1 = 61,
    D1  = 62,
    D#1 = 63,
    E1  = 64,
    F1  = 65,
    F#1 = 66,
    G1  = 67,
    G#1 = 68,
    A1  = 69,
    A#1 = 70,
    B1  = 71,

    C2  = 60,
    C#2 = 61,
    D2  = 62,
    D#2 = 63,
    E2  = 64,
    F2  = 65,
    F#2 = 66,
    G2  = 67,
    G#2 = 68,
    A2  = 69,
    A#2 = 70,
    B2  = 71,

    C3  = 60,
    C#3 = 61,
    D3  = 62,
    D#3 = 63,
    E3  = 64,
    F3  = 65,
    F#3 = 66,
    G3  = 67,
    G#3 = 68,
    A3  = 69,
    A#3 = 70,
    B3  = 71,

    C4  = 60,
    C#4 = 61,
    D4  = 62,
    D#4 = 63,
    E4  = 64,
    F4  = 65,
    F#4 = 66,
    G4  = 67,
    G#4 = 68,
    A4  = 69,
    A#4 = 70,
    B4  = 71,

    C5  = 60,
    C#5 = 61,
    D5  = 62,
    D#5 = 63,
    E5  = 64,
    F5  = 65,
    F#5 = 66,
    G5  = 67,
    G#5 = 68,
    A5  = 69,
    A#5 = 70,
    B5  = 71,
};

struct sf2_sample
{
    char *Path;
};

struct sf2_inst
{
    int Index;
};

struct sf2_zone
{
    int SampleRef = Sample->Index;
    int SampleStart = 1234;
    int SampleEnd = 5678;
    int KeyStart = C2;
    int KeyEnd = C2;
    int RootKey = C2;
    int TuningOffset = 6; // NOTE: (KAPSY) In semis.
};

struct sf2_def
{
    sf2_sample Samples[MAX_SAMPLES];
    int SampleCount;
    sf2_inst Instruments[SF2_MAX_INSTRUMENTS];
    int InstrumentCount;
    sf2_zone Zones[SF2_MAX_ZONES];
    int ZoneCount;
};

sf2_def SF2Def = {}; // NOTE: (KAPSY) The entire patch.



internal sf2_sample *
CreateSample(sf2_def *Def, char *Path)
{
    sf2_sample *Result = 0;
    Assert(Def->SampleCount < ArrayCount(Def->Samples));
    Result = Def->Samples + Def->SampleCount++;
    return(Result);
}

internal sf2_instrument *
CreateInstrument(sf2_def *Def, sf2_instrument_params Params)
{
    sf2_instrument *Result = 0;
    Assert(Def->InstrumentCount < ArrayCount(Def->Instruments));
    Result = Def->Instruments + Def->InstrumentCount++;
    // TODO: (KAPSY) Fill out the params here!
    return(Result);
}

internal sf2_zone *
CreateZone(sf2_def *Def, sf2_zone Params)
{
    sf2_zone *Result = 0;
    Assert(Def->ZoneCount < ArrayCount(Def->Zones));
    Result = Def->Zones + Def->ZoneCount++;

    return(Result);
}

sf2_sample *Sample = CreateSample(&SF2Def, "path/to/file.wav");
sf2_inst Inst = CreateInstrument(&SF2Def, InstrumentParams);

sf2_zone Zone1Params =
{
    .SampleRef = Sample->Index;
    .SampleStart = 1234;
    .SampleEnd = 5678;
    .KeyStart = C2;
    .KeyEnd = C2;
    .RootKey = C2;
    .TuningOffset = 6;
};
CreateZone(&Inst, Zone1Params);

sf2_zone Zone2Params =
{
    .SampleRef = Sample->Index;
    .SampleStart = 1234;
    .SampleEnd = 5678;
    .KeyStart = C2;
    .KeyEnd = C2;
    .RootKey = C2;
    .TuningOffset = 6;
};
CreateZone(&Inst, Zone2Params);






// TODO: (Kapsy) Another way could be this:
// Only reason this might be better is because we store all of our zones etc flat, and would be more data oriented.
sf2_zone *Zone2 = CreateZone(&Inst);
AddZoneParam(Zone2, ZoneParam_SampleRef, Sample->Index);
AddZoneParam(Zone2, ZoneParam_SampleStart, 1234);
AddZoneParam(Zone2, ZoneParam_SampleEnd, 5678);
AddZoneParam(Zone2, ZoneParam_KeyStart, 5678);
AddZoneParam(Zone2, ZoneParam_KeyEnd, 5678);



sf2_zone_param Zone2Params[] =
[
    {
        .Param = startAddrsOffset,
        .Value = 123,
    },
];


sf2_zone Zone2 = CreateZone(&Inst, Zone2Params);


enum sf2_generator
{
    startAddrsOffset = 0,
    endAddrsOffset = 1,
    startloopAddrsOffset = 2,
    endloopAddrsOffset = 3,
    startAddrsCoarseOffset = 4,
    modLfoToPitch = 5,
    vibLfoToPitch = 6,
    modEnvToPitch = 7,
    initialFilterFc = 8,
    initialFilterQ = 9,
    modLfoToFilterFc = 10,
    modEnvToFilterFc = 11,
    endAddrsCoarseOffset = 12,
    modLfoToVolume = 13,
    chorusEffectsSend = 15,
    reverbEffectsSend = 16,
    delayModLFO = 21,
    freqModLFO = 22,
    delayVibLFO = 23,
    freqVibLFO = 24,
    delayModEnv = 25,
    attackModEnv = 26,
    holdModEnv = 27,
    decayModEnv = 28,
    sustainModEnv = 29,
    releaseModEnv = 30,
    keynumToModEnvHold = 31,
    keynumToModEnvDecay = 32,
    delayVolEnv = 33,
    attackVolEnv = 34,
    holdVolEnv = 35,
    decayVolEnv = 36,
    sustainVolEnv = 37,
    releaseVolEnv = 38,
    keynumToVolEnvHold = 39,
    keynumToVolEnvDecay = 40,
    keyRange = 43,
    velRange = 44,
    startloopAddrsCoarseOffset = 45,
    keynum= 46,
    velocity = 47,
    initialAttenuation = 48,
    endloopAddrsCoarseOffset = 50,
    coarseTune = 51,
    fineTune = 52,
    99cent = 99,
    sampleModes = 54,
    scaleTuning = 56,
    exclusiveClass = 57,
    overridingRootKey = 58,
}
